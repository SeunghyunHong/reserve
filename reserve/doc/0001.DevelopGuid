항공예매시스템 개발 가이드 ( 0.1 v)
----  
  
기본적으로 항공예매시스템을 개발하기 위해 필요한 몇가지에 대해서 정리한 문서입니다. 필요할때마다 갱신할 예정이며 이에 따라 문서 역시 버전관리 형태로 진행 되어집니다. 차후 현재 스터디인원 뿐만 아니라 다른 인원들에게도 사용 되어질 수 있기에 최대한 원할한 개발을 위해 가이드를 작성하였습니다.  

## ● Git 사용법 

###1. Github로부터 소스 받아오기  
```
$ git clone https://github.com/changhwa/reserve.git  
```  

기본적으로는 각자의 모듈에 맞는 branch 에서 작업 후 테스트를 거칩니다. 이상이 없을 경우에만 master로 merge 되어지는 형태로 관리하도록 되어 있습니다. master로 merge 하는 작업은 현재 스터디 리더인 오창화 의 스크립트에 의해서 진행되도록 하고 있습니다만 조만간 변경할 예정입니다.  

###2. 브랜치 생성 하기  
위에서 언급하였습니다만 각각 스터디이니 만큼 각 모듈별로 따로 branch를 생성해서 프로젝트를 진행하고 있습니다. 이유는 하나의 모듈에서 오류가 나도 다른분들은 그냥 원할하게 진행하기 위해서 이기도 하거니와 개발할때 제가 조언을 해주기 좀 더 편하기 때문입니다.  

```  
$ git checkout -b 브랜치명
```  

기본적으로 본인의 branch 에서만 작업을 하는 것을 원칙으로 하며 특별히 다른 분의 branch에 접근해야 한다면 해당 모듈의 진행자 분과 리더에게 연락 후 진행 함을 원칙으로 합니다. 현재 저희 브랜치는 총 5개 이며 각각 개발이 진행되고 있습니다.  
1. reserve(예약관련)   
2. bbs(게시판)    
3. users(사용자)    
4. inform(항공정보)    
5. hybrid(하이브리드앱관련)  
추가적으로 branch를 생성이 되어질 수 있으며 앞으로 관리자 모듈 기타 main 디자인 부분등이 추가 되어질 예정입니다.  

###3. 소스 수정 후 add & commit 하기  
eclipse에 임포트 하는 부분은 제외하였습니다. Egit랑 연동법은 따로 찾아보시기 바랍니다. (개인적으로는 Egit를 사용하시는 것보단 명령어에 숙지 등을 위해 터미널로 작업하시는 것을 추천드립니다.)  
소스를 수정한 후 반영하기 위해 add 하고 commit 하는 부분입니다. add는 commit 할 소스를 더한다 라는 개념으로 생각하시면 될 듯합니다. 즉 commit 할 단위를 묶는다고 보시면 됩니다.  
※ commit을 할때에는 꼭 작업단위로 commit 해주시면 감사하겠습니다. 한번에 몰아서 한다던지 너무 개개별로 나눈다던지 하면 log관리라던지 rollback 시에 많은 어려움과 귀차니즘을 동반할 수 있습니다.  

```  
$ git add 파일명 
```  
```
$ git commit  -m "커밋메세지"
```

또는   

```
$ git commit -a -m "커밋메세지"
```  

###4. 서버로 push 하기
svn과 git의 큰 차이점 중 하나가 바로 이 부분에 있습니다. 기본적으로 svn은 한번의 commit 으로 실제 repository에 반영되는데 git의 경우는 로컬 Repository에 저장 후 push 라는 action이 일어날 경우 실제 repository에 저장을 합니다. 즉 3번의 경우를 진행하면 단순히 로컬 repository에 저장이 되는 셈입니다.  

```
$ git push origin 브랜치명
```  

원격 브랜치로 push를 진행 합니다. 하고나서 github에서 제대로 되었는지 확인해 보면 됩니다. 추가적으로 commit 시 메세지 멘트는 상당히 중요합니다만 간단하게 작성하는 경우에는 해당 commit이 무슨 commit인지 알 수 없는 경우도 종종 발생하게 됩니다. 자신의 작업이 정확히 어떤 작업이었는지 등에 대한 자세히 까지는 아니어도 메세지로만으로도 대략은 판단이 되도록 하여야 합니다.  

###5. 서버로 부터 pull 받기  
해당 명령어는 svn의 update 같이 실 Repository로부터 최신화된 소스를 받아오는 명령어 입니다. 실제로 이 명령어는 git fetch라는 명령어를 실행하여 원격서버로부터 로컬 repostiory 까지 받아지고 merge 명령어를 통하여 현재 작업중인 소스에 병합하는 부분을 하나의 명령어로 처리하도록 되어 있습니다.  

```
$ git pull
```  

이상으로 기본적으로 진행에 필요한 git설명을 마칩니다. 사실 git status 라던지 rebase 또는 여러 충돌을 해결하는 방법도 적음이 맞으나 이 부분을 다 적기에는 너무 방대하여 개인적으로 찾아보시는 것을 추천드립니다. 또한 날 잡아서 이 부분은 세미나 형태로 진행하도록 하겠습니다.  



## ● 소스 실행


### 1. maven으로 소스 compile 하기  

기본적인 maven의 goal에 대해서는 차후 다른 문서로 설명하기로 하고 이번에는 단순히 소스 실행을 위한 기본적인 Guide에 대해서 설명하겠습니다. 모든 것은 터미널을 이용한 명령줄로 하며 STS를 이용해서 maven 으로 실행하셔도 무방합니다. ( 버그인지는 모르겠으나 MAC에서는 STS로 Maven을 실행할 경우 target 폴더를 새로고침 해줘야합니다 )  

```
$ mvn clean 
```  
```
$ mvn package
```  

일단 깔끔하게  clean을 진행한 후 package goal을 실행하시면 자동적으로 컴파일이 진행되어집니다. 후에 STS에서 Tomcat을 시작하시면 되겠습니다.  
  

## ● 소스작성법  
  
###1. 각 필요한 패키지 작성  

Spring @MVC 방식으로 작성되어 있는 코드이며 annotation을 이용하여 작성하도록 설정 되어 있습니다. 기본적으로 패키지는 controller, service , dao 로 나누어지며 Bean을 사용할 경우 bean 패키지로 사용합니다. service는 다른 사람이 사용해야 할 경우인 메소드는 전부 인터페이스화 하는 것이 원칙입니다. dao는 전부 interface화 해주세요 mybatis를 사용하기 위해서 전부 인터페이스 처리 하였습니다.  
최대한 기본 모듈명은 branch 이름으로 해야 헷갈리지 않고 작업이 가능하므로 기본 모듈 패키지 이름은 branch 이름과 맞춥니다.  

###2. view 파일작성  

저희 이번 프로젝트 스터디에서는 템플릿 엔진을 사용하지 않습니다. 여러개 배울것도 많은데 템플릿엔진까지 하기는 벅차다고 판단하였기 때문입니다. 그렇기 때문에 include 방향으로 잡았고 호출해서 찍는 용도로만 사용하시면 될 것 같습니다 (Layout을 처리하는 소스는 현재 구상 중입니다. 템플릿 형태처럼 사용할 수 있도록..)  
Controller 에서 해당 일처리가 끝난 후 return 되는 부분에 jsp파일이 입력되어지는데 webapp/WEB-INF/views 부터 기준입니다. 즉 /reserve/seat 라고 return하면 webapp/WEB-INF/views/reserve/seat.jsp를 찾습니다. 주소는 http://localhost:8080/reserve/reserve/seat 가 되겠지요.  

###3. @RequestMapping   , @RequestParam

자세한 Spring @MVC에 대해서는 개인적으로 공부하시면서 스터디가 진행되어지겠지만 꼭 필요한 세가지, 네가지 정도만 언급하고 넘어가도록 하겠습니다. 그 중 @RequestMapping은 주소를 해당 메소드와 Mapping 해주는 역할을 한다고 생각하시면 이해가 쉬울 것 같습니다.   

```
@RequestMapping (value="/reserve/userinfo")
```  
```  
public String getUserInfo(@RequestParam UserBean userBean, ModelMap map)
```  

이런 부분을 가정하였을 때 주소가 http://localhost/프로젝트명/reserve/userinfo 형태로 들어오게 되면 자동으로 getUserInfo 메소드를 실행하도록 되어 있습니다. form action의 경우에는 /프로젝트명/reserve/userinfo 가 됩니다. 그리고 해당 값이 전송되면 @RequestParam은 그값을 받아오는 즉 request.getParameter를 자동적으로 name 필드에 맞게 set을 하도록 합니다. 그 후에 처리된값은 ModelMap 형태로 다시 setAttribute 한다는 말입니다. 자세한 부분은 기존에 작성된 소스중에 아래 소스를 참고하시면 됩니다.  
[github controller] : (https://github.com/changhwa/reserve/blob/reserve/reserve/src/main/java/com/narratage/reserve/reservation/controller/ReservationContoller.java)  
몇가지 예시에 대해서 되어 있으므로 참고하시기 좋을 듯 합니다.  

###4. Query  

DAO 작성법이 많이 변경될 수 있으므로 현재 (2012.09.14) 기준으로 사용하는 방법으로 정리후 계속적으로 갱신해 나가도록 하겠습니다. 작성자 역시 mybatis 경우엔 처음이다 보니 아직 개선해야될 사항이 많습니다. 그러므로 지금 부분에 대해서는 간략히 어디부분에 작성하는지 정도만 언급하고 넘어가도록 하겠습니다.  
기본적으로 mybatis에서는 DAO의 경우 interface로 작업해야한다고 합니다. 하여 interface를 생성후 impl로 구현해주시면 됩니다. 구현할때에 namespace라는 부분을 작성해야하는데 namespace는 DAO까지 패키지의 위치입니다.  

```
private String nameSpace="com.narratage.reserve.reservation.dao.ReservationDao.";
```  
```
return (ArrayList) getSqlSession().selectList(nameSpace+"메소드명", airinformCode);
```  

이런형태로 작성을 합니다. 그리고 쿼리는 /src/main/resources/mybatis/mapper 해당 위치에 폴더를 생성후 xml 형태로 작성하시면 됩니다. 이 때 주의사항으로는 namespace가 interface패키지명이 되어야합니다.  

```
<mapper namespace="com.narratage.reserve.reservation.dao.ReservationDao">
```  


## 마치면서  

위의 문서는 아주 기본적으로 저희 프로젝트를 셋팅하는데에 있어 조금이나마 도움이되고자 문서화를 하였습니다. 특히 아직 mybatis의 경우는 저 역시 익혀가는 상황이기 때문에 부족한점이 있고 그 부분에 대해서는 계속적으로 공부하고 개선해 나아가고 있습니다. 가이드 문서는 스터디 팀원이면 누구나 수정 할 수 있고 작성후 저에게 알려주시면 작성 내용에 따라 version 갱신을 하도록 하겠습니다. 앞으로 다같이 열심히 즐겁게 코딩하기 위해 많은 부분을 공유하고 지속적으로 공부해나가면 언젠가는 좋지 않겠습니까?  


# 끝끝끝끝





